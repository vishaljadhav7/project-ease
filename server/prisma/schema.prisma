// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL1")
}

model User {
  id               String    @id @default(uuid())
  isAdmin          Boolean   @default(false) 
  userName         String     
  emailId          String     @unique
  password         String
  profileAvatarUrl String     @default("https://plus.unsplash.com/premium_photo-1683972509783-da5a74795bb3?q=80&w=1400")

  createdTasks     Task[]    @relation("createdTasks")
  assignedTasks    Task[]    @relation("assignedTasks")

  teamId           String?
  team             Team?     @relation(fields: [teamId], references: [id])

  userComments     UserComments[]  
  myProjects       Project[] 
}

model Team {
   id                    String    @id @default(uuid())
   teamName              String
   users                 User[] 
   projectTeams          ProjectTeam[] 
   projectManagerUserId  String?
}

model Project {
   id               String    @id @default(uuid())
   projectName      String
   description      String?
   startDate        DateTime?
   endDate          DateTime?

   projectOwner     User      @relation(fields: [projectOwnerId], references: [id], onDelete: Cascade) 
   projectOwnerId   String   
      
   tasks            Task[]     @relation("projectTask")   
   projectTeams     ProjectTeam[]  
}


model ProjectTeam {
  id              String      @id @default(uuid())
  
  teamId           String
  team             Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)   

  projectId        String
  project          Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)            
}

model Task {
  id               String    @id @default(uuid())
  taskName         String
  description      String?
  status           Status?
  priority         Priority?
  tags             String?
  startDate        DateTime?
  dueDate          DateTime?
  points           Int?

  createdById      String
  createdTask      User        @relation("createdTasks", fields: [createdById], references: [id], onDelete: Cascade)
  
  assignedToId     String?
  assignedTo       User?        @relation("assignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)

  projectId        String
  project          Project      @relation("projectTask", fields: [projectId], references: [id], onDelete: Cascade)
  
  userComments     UserComments[]
}
 
model UserComments {
  id               String       @id @default(uuid())
  comment          String

  commentById      String
  commentBy        User         @relation(fields: [commentById], references: [id], onDelete: Cascade)

  commentOnTaskId  String
  commentOnTask    Task         @relation(fields: [commentOnTaskId], references: [id], onDelete: Cascade)      
  createdAt       DateTime  @default(now())
}

enum Priority {
  Urgent  
  High 
  Medium 
  Low 
  Backlog
}

enum Status {
  To_Do 
  In_Progress 
  Under_Review 
  Completed 
}
